/**
 * Starter code with JUnit tests for code generation used in the class project in COP5556 Programming Language Principles 
 * at the University of Florida, Spring 2018.
 * 
 * This software is solely for the educational benefit of students 
 * enrolled in the course during the Spring 2018 semester.  
 * 
 * This software, and any software derived from it,  may not be shared with others or posted to public web sites,
 * either during the course or afterwards.
 * 
 *  @Beverly A. Sanders, 2018
 */


package cop5556sp18;

import static org.junit.Assert.*;

import java.awt.image.BufferedImage;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import javax.swing.JFrame;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp18.CodeGenUtils.DynamicClassLoader;
import cop5556sp18.AST.Program;

public class CodeGenTest {
	
	//determines whether show prints anything
	static boolean doPrint = true;
	
	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	//determines whether a classfile is created
	static boolean doCreateFile = false;

	@Rule
	public ExpectedException thrown = ExpectedException.none();
	

	//values passed to CodeGenerator constructor to control grading and debugging output
	private boolean devel = true; //if true, print devel output
	private boolean grade = true; //if true, print grade output
	
//	private boolean devel = false; 
//	private boolean grade = false; 
	
	//sets the default width and height of newly created images.  Should be small enough to fit on screen.
	public static final int defaultWidth = 1024;
	public static final int defaultHeight = 1024;

	
	/**
	 * Generates bytecode for given input.
	 * Throws exceptions for Lexical, Syntax, and Type checking errors
	 * 
	 * @param input   String containing source code
	 * @return        Generated bytecode
	 * @throws Exception
	 */
	byte[] genCode(String input) throws Exception {
		
		//scan, parse, and type check
		Scanner scanner = new Scanner(input);
		show(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		Program program = parser.parse();
		TypeChecker v = new TypeChecker();
		program.visit(v, null);
//		show(program);  //It may be useful useful to show this here if code generation fails

		//generate code
		CodeGenerator cv = new CodeGenerator(devel, grade, null, defaultWidth, defaultHeight);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		show(program); //doing it here shows the values filled in during code gen
		//display the generated bytecode
		show(CodeGenUtils.bytecodeToString(bytecode));
		
		//write byte code to file 
		if (doCreateFile) {
			String name = ((Program) program).progName;
			String classFileName = "bin/" + name + ".class";
			OutputStream output = new FileOutputStream(classFileName);
			output.write(bytecode);
			output.close();
			System.out.println("wrote classfile to " + classFileName);
		}
		
		//return generated classfile as byte array
		return bytecode;
	}
	
	/**
	 * Run main method in given class
	 * 
	 * @param className    
	 * @param bytecode    
	 * @param commandLineArgs  String array containing command line arguments, empty array if none
	 * @throws + 
	 * @throws Throwable 
	 */
	void runCode(String className, byte[] bytecode, String[] commandLineArgs) throws Exception  {
		RuntimeLog.initLog(); //initialize log used for grading.
		DynamicClassLoader loader = new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
		Class<?> testClass = loader.define(className, bytecode);
		@SuppressWarnings("rawtypes")
		Class[] argTypes = {commandLineArgs.getClass()};
		Method m = testClass.getMethod("main", argTypes );
		show("Output from " + m + ":");  //print name of method to be executed
		Object passedArgs[] = {commandLineArgs};  //create array containing params, in this case a single array.
		try {
		m.invoke(null, passedArgs);	
		}
		catch (Exception e) {
			Throwable cause = e.getCause();
			if (cause instanceof Exception) {
				Exception ec = (Exception) e.getCause();
				throw ec;
			}
			throw  e;
		}
	}
	

	/**
	 * When invoked from JUnit, Frames containing images will be shown and then immediately deleted.
	 * To prevent this behavior, waitForKey will pause until a key is pressed.
	 * 
	 * @throws IOException
	 */
	void waitForKey() throws IOException {
		System.out.println("enter any char to exit");
		System.in.read();
	}

	/**
	 * When invoked from JUnit, Frames containing images will be shown and then immediately deleted.
	 * To prevent this behavior, keepFrame will keep the frame visible for 5000 milliseconds.
	 * 
	 * @throws Exception
	 */
	void keepFrame() throws Exception {
		Thread.sleep(5000);
	}
	
	
	
	


	/**
	 * Since we are not doing any optimization, the compiler will 
	 * still create a class with a main method and the JUnit test will
	 * execute it.  
	 * 
	 * The only thing it will do is append the "entering main" and "leaving main" messages to the log.
	 * 
	 * @throws Exception
	 */
	@Test
	public void emptyProg() throws Exception {
		String prog = "emptyProg";	
		String input = prog + "{}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n "+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	

	
	@Test
	public void integerLit() throws Exception {
		String prog = "intgegerLit";
		String input = prog + "{show 3+2-1;} ";
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;4;leaving main;",RuntimeLog.globalLog.toString());
	}
	@Test
	public void testUnary() throws Exception {
		String prog = "testUnary";
		String input = prog + "{show(!2);} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);

	}

	@Test
	public void booleanLit() throws Exception {
		String prog = "booleanLit";
		String input = prog + "{show true; } ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);

	}

	@Test
	public void floatLit() throws Exception {
		String prog = "floatLit";
		String input = prog + "{show 1.0-9; } ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);

	}
	@Test
	public void testFunc() throws Exception {
		String prog = "testFunc";
		String input = prog + "{show log(1.0);} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);

	}

	@Test
	public void testDeclaration() throws Exception {
		String prog = "testDeclaration";
		String input = prog + "{int a; int b; a := 10; b := 2; show a**b;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);

	}

	@Test
	public void testSleep() throws Exception {
		String prog = "testDeclaration";
		String input = prog + "{/*sleep(10000);*/ show abs(3-5);} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);

	}

	@Test
	public void showImage() throws Exception {
		String prog = "showImage";
		String input = prog + "{image a[200,300]; show a; /*sleep(5000);*/} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);

	}

	@Test
	public void filename() throws Exception {
		String prog = "test";
		String input = prog + "{filename a; input a from @ 0;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {"/devanshusingh/Desktop/test.jpeg"}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);

	}


	@Test
	public void args() throws Exception {
		String prog = "test";
		String input = prog + "{image a[200,300]; input a from @ 0; image b; b:=a; show b; sleep(5000);} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {"/Users/devanshusingh/Desktop/test.jpeg"}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
	}

	@Test
	public void args2() throws Exception {
		String prog = "prog";
		String input = "prog{image b[512,256]; show width(b); show height(b);\nimage c; show width(c); show height(c);}" ;
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {"8.7"}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);

	}

	@Test
	public void args3() throws Exception {
		String prog = "test";
		String input = prog + "{float a; input a from @ 0; show a; } ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {"8.7"}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);

	}

	@Test
	public void args5() throws Exception {
		String prog = "prog";
		String input = "prog{image b[512,256]; show width(b); show height(b);\nimage c; show width(c); show height(c);} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);

	}

	@Test
	public void args6() throws Exception {
		String prog = "prog";
		String input = "prog{int a; a := 123456789;\n show red(a); show green(a); show blue(a);}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);

	}

	@Test
	public void args7() throws Exception {
		String prog = "prog";
		String input = "prog{int a; a := 123456789; show alpha(a);\n a := -1; show alpha(a);}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
	}

	@Test
	public void args8() throws Exception {
		String prog = "prog";
		String input = "prog{float a; a := float(-3.7); show a; a := float(4); show a;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
	}

	@Test
	public void args9() throws Exception {
		String prog = "prog";
		String input = "prog{int a; a := int(-3.7); show a; a := int(4); show a;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
	}

	@Test
	public void args10() throws Exception {
		String prog = "prog";
		String input = "prog{image y[512,256];\n show y;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
	}

	@Test
	public void args11() throws Exception {
		String prog = "prog";
		String input = "prog{show !false; show !true; show !(true | false); show !(true & false);} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
	}

	@Test
	public void args15() throws Exception {
		String prog = "prog";
		String input = "prog{show !(true & false);} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
	}

	@Test
	public void args12() throws Exception {
		String prog = "prog";
		String input = "prog{show !1; show !-1; show !0; show !-2;} ";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
	}

	@Test
	public void args13() throws Exception {
		String prog = "prog";
		String input = "prog{int a; a := 123456789; show alpha(a);\n a := -1; show alpha(a);}";
		//             "prog{int a; a := 123456789; show alpha(a);\n a := -1; show alpha(a);}".
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
	}

	@Test
	public void args14() throws Exception {
		String prog = "prog";
		String input = "prog{show false ? 3 : 8;}";
		//             "prog{int a; a := 123456789; show alpha(a);\n a := -1; show alpha(a);}".
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
	}

	@Test
	public void args16() throws Exception {
		String prog = "prog";
		String input = "prog{if(false){ show 1.3;}; if(true){show 2;};}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
	}

	@Test
	public void args17() throws Exception {
		String prog = "prog";
		String input = "prog{int a ; a:= 10; while(a>0){int b; b := 5; show a+b; a := a-1;};}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
	}

	@Test
	public void args17_5() throws Exception {
		String prog = "prog";
		String input = "prog{image bird; input bird from @0; show bird[1,2]; show green(bird[1,2]);show blue(bird[1,2]); red(bird[1,2]) := 10;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {"/Users/devanshusingh/Desktop/test.jpeg"}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
	}

	@Test
	public void args18() throws Exception {
		String prog = "prog";
		String input = "prog{" +
				"image bird;" +
				" input bird from @0;" +
				"show bird;" +
				"sleep(4000);" +
				"image bird2[width(bird),height(bird)];" +
				"int x;" +
				"x := 0;" +
				"blue(bird2[1,1]):= red(bird[1,1]);"+
				"while(x<width(bird2)) {" +
					"int y;" +
					"y := 0;" +
					"while(y<height(bird2)) {" +
						"bird2[x,y]:= red(bird[x,y]);" +
						"green(bird2[x,y]):= blue(bird[x,y]);" +
						"red(bird2[x,y]):= green(bird[x,y]);" +
						"alpha(bird2[x,y]):= Z;" +
						"y := y+1;};" +
					"x :=x+1;" +
					"};" +
				"show bird2;" +
				"sleep(4000);" +
				"filename f; input f from @1;"+
				"write bird2 to f;" +
				"}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {"/Users/devanshusingh/Desktop/test.jpeg","/Users/devanshusingh/Desktop/out.jpeg"}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
	}

	@Test
	public void args19() throws Exception {
		String prog = "prog";
		String input = "prog{show polar_a[1,1]; show polar_r[1,1]; show cart_x[polar_r[1,1],polar_a[1,1]];show cart_y[polar_r[1,1],polar_a[1,1]];}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
	}

	@Test
	public void args20() throws Exception {
		String prog = "demo1";
		String input =
				"demo1{image h;input h from @0;show h; sleep(4000); image g[width(h),height(h)];int x;x:=0;"
						+ "while(x<width(g)){int y;y:=0;while(y<height(g)){g[x,y]:=h[y,x];y:=y+1;};x:=x+1;};show g;sleep 4000;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {"/Users/devanshusingh/Desktop/test.jpeg"}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
	}

	@Test
	public void args21() throws Exception {
		String prog = "makeRedImage";
		String input ="makeRedImage{image im[256,256];int x;int y;x:=0;y:=0;while(x<width(im)) {y:=0;while(y<height(im)) {im[x,y]:=<<255,255,0,0>>;y:=y+1;};x:=x+1;};show im; sleep 4000;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {"/Users/devanshusingh/Desktop/test.jpeg"}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
	}

	@Test
	public void args22() throws Exception {
		String prog = "PolarR2";
		String input ="PolarR2{image im[1024,1024];int x;x:=0;while(x<width(im)) {int y;y:=0;while(y<height(im)) {float p;p:=polar_r[x,y];int r;r:=int(p)%Z;im[x,y]:=<<Z,0,0,r>>;y:=y+1;};x:=x+1;};show im; sleep 4000;}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {"/Users/devanshusingh/Desktop/test.jpeg"}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
	}

	@Test
	public void args23() throws Exception {
		String prog = "prog";
		String input ="prog{float x; x:=3.5; if( 3.0 <= 3.15){show(10);}; show(20);}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {"/Users/devanshusingh/Desktop/test.jpeg"}; //create command line argument array to initialize params, none in this case
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n"+RuntimeLog.globalLog);
	}
}